#!/usr/bin/env python3
#
# Archey [version 0.3.0]
#
# Archey is a simple system information tool written in Python.
#
# Copyright 2010 Melik Manukyan <melik@archlinux.us>
# Copyright 2010 David Vazgenovich Shakaryan <dvshakaryan@gmail.com>
#
# ASCII art by Brett Bohnenkamper <kittykatt@silverirc.com>
# Changes Jerome Launay <jerome@projet-libre.org>
# Fedora support by YeOK <yeok@henpen.org>
#
# Distributed under the terms of the GNU General Public License v3.
# See http://www.gnu.org/licenses/gpl.txt for the full license text.


import re

from math import floor
from os import getenv, getuid
from collections import OrderedDict
from subprocess import Popen, PIPE, check_output


# -------------- Dictionaries -------------- #

colorDict = {
	'Arch Linux': ['\x1b[0;34m', '\x1b[1;34m'],
	'CrunchBang': ['\x1b[1;37m', '\x1b[1;37m'],
	'Debian': ['\x1b[0;31m', '\x1b[1;31m'],
	'Fedora': ['\x1b[1;37m', '\x1b[0;34m'],
	'Mint': ['\x1b[0;32m', '\x1b[1;37m'],
	'Ubuntu': ['\x1b[0;31m', '\x1b[1;31m', '\x1b[0;33m'],
	'Sensors': ['\x1b[0;31m', '\x1b[0;32m', '\x1b[0;33m'],
	'Clear': ['\x1b[0m']
}

deDict = {
	'cinnamon': 'Cinnamon',
	'gnome-session': 'GNOME',
	'gnome-shell': 'GNOME',
	'mate-session': 'MATE',
	'ksmserver': 'KDE',
	'xfce4-session': 'Xfce',
	'fur-box-session': 'Fur Box',
	'lxsession': 'LXDE',
	'lxqt-session': 'LXQt'
}

wmDict = {
	'awesome': 'Awesome',
	'beryl': 'Beryl',
	'blackbox': 'Blackbox',
	'bspwm': 'bspwm',
	'cinnamon': 'Cinnamon',
	'compiz': 'Compiz',
	'dwm': 'DWM',
	'enlightenment': 'Enlightenment',
	'herbstluftwm': 'herbstluftwm',
	'fluxbox': 'Fluxbox',
	'fvwm': 'FVWM',
	'i3': 'i3',
	'icewm': 'IceWM',
	'kwin': 'KWin',
	'metacity': 'Metacity',
	'musca': 'Musca',
	'nemo': 'Nemo',
	'openbox': 'Openbox',
	'pekwm': 'PekWM',
	'qtile': 'QTile',
	'ratpoison': 'ratpoison',
	'scrotwm': 'ScrotWM',
	'stumpwm': 'StumpWM',
	'subtle': 'Subtle',
	'monsterwm': 'MonsterWM',
	'wingo': 'Wingo',
	'wmaker': 'Window Maker',
	'wmfs': 'Wmfs',
	'wmii': 'wmii',
	'xfwm4': 'Xfwm',
	'xmonad': 'xmonad'
}

logosDict = {
	'Arch Linux': """
		{color[1]}               +                 {results[0]}
		{color[1]}               #                 {results[1]}
		{color[1]}              ###                {results[2]}
		{color[1]}             #####               {results[3]}
		{color[1]}             ######              {results[4]}
		{color[1]}            ; #####;             {results[5]}
		{color[1]}           +##.#####             {results[6]}
		{color[1]}          +##########            {results[7]}
		{color[1]}         ######{color[0]}#####{color[1]}##;          {results[8]}
		{color[1]}        ###{color[0]}############{color[1]}+         {results[9]}
		{color[1]}       #{color[0]}######   #######         {results[10]}
		{color[0]}     .######;     ;###;`\".       {results[11]}
		{color[0]}    .#######;     ;#####.        {results[12]}
		{color[0]}    #########.   .########`      {results[13]}
		{color[0]}   ######'           '######     {results[14]}
		{color[0]}  ;####                 ####;    {results[15]}
		{color[0]}  ##'                     '##    {results[16]}
		{color[0]} #'                         `#   {results[17]}
		{color[0]}\x1b[0m""",
	'Debian': """
		{color[1]}                                  {results[0]}
		{color[1]}          _sudZUZ#Z#XZo=_         {results[1]}
		{color[1]}       _jmZZ2!!~---~!!X##wx       {results[2]}
		{color[1]}    .<wdP~~            -!YZL,     {results[3]}
		{color[1]}   .mX2'       _xaaa__     XZ[.   {results[4]}
		{color[1]}   oZ[      _jdXY!~?S#wa   ]Xb;   {results[5]}
		{color[1]}  _#e'     .]X2(     ~Xw|  )XXc   {results[6]}
		{color[1]} .2Z`      ]X[.       xY|  ]oZ(   {results[7]}
		{color[1]} .2#;      )3k;     _s!~   jXf`   {results[8]}
		{color[0]}  1Z>      -]Xb/    ~    __#2(    {results[9]}
		{color[0]}  -Zo;       +!4ZwerfgnZZXY'      {results[10]}
		{color[0]}   *#[,        ~-?!!!!!!-~        {results[11]}
		{color[0]}    XUb;.                         {results[12]}
		{color[0]}     )YXL,,                       {results[13]}
		{color[0]}       +3#bc,                     {results[14]}
		{color[0]}         -)SSL,,                  {results[15]}
		{color[0]}            ~~~~~                 {results[16]}
		{color[0]}                                  {results[17]}
		{color[0]}\x1b[0m""",
	'Ubuntu': """
		{color[0]}                           .oyhhs:     {results[0]}
		{color[1]}                  ..--.., {color[0]}shhhhhh-     {results[1]}
		{color[1]}                -+++++++++`:{color[0]}yyhhyo`    {results[2]}
		{color[2]}           .--  {color[1]}-++++++++/-.-{color[0]}::-`      {results[3]}
		{color[2]}         .::::-   {color[1]}:-----:/+++/++/.     {results[4]}
		{color[2]}        -:::::-.          {color[1]}.:++++++:    {results[5]}
		{color[1]}   ,,, {color[2]}.:::::-`             {color[1]}.++++++-   {results[6]}
		{color[1]} ./+++/-{color[2]}`-::-                {color[1]}./////:   {results[7]}
		{color[1]} +++++++ {color[2]}.::-                          {results[8]}
		{color[1]} ./+++/-`{color[2]}-::-                {color[0]}:yyyyyo   {results[9]}
		{color[1]}   ``` `{color[2]}-::::-`             {color[0]}:yhhhhh:   {results[10]}
		{color[2]}       -:::::-.         {color[0]}`-ohhhhhh+    {results[11]}
		{color[2]}         .::::-` {color[0]}-o+///+oyhhyyyhy:     {results[12]}
		{color[2]}          `.--  {color[0]}/yhhhhhhhy+{color[2]},....       {results[13]}
		{color[0]}                /hhhhhhhhh{color[2]}-.-:::;      {results[14]}
		{color[0]}                `.:://::- {color[2]}-:::::;      {results[15]}
		{color[2]}                          `.-:-'       {results[16]}
		{color[2]}                                       {results[17]}
		{color[2]}\x1b[0m""",
	'CrunchBang': """
		{color[0]}                 ___       ___      _    {results[0]}
		{color[0]}                /  /      /  /     | |   {results[1]}
		{color[0]}               /  /      /  /      | |   {results[2]}
		{color[0]}              /  /      /  /       | |   {results[3]}
		{color[0]}      _______/  /______/  /______  | |   {results[4]}
		{color[0]}     /______   _______   _______/  | |   {results[5]}
		{color[0]}           /  /      /  /          | |   {results[6]}
		{color[0]}          /  /      /  /           | |   {results[7]}
		{color[0]}         /  /      /  /            | |   {results[8]}
		{color[0]}  ______/  /______/  /______       | |   {results[9]}
		{color[0]} /_____   _______   _______/       | |   {results[10]}
		{color[0]}      /  /      /  /               | |   {results[11]}
		{color[0]}     /  /      /  /                |_|   {results[12]}
		{color[0]}    /  /      /  /                  _    {results[13]}
		{color[0]}   /  /      /  /                  | |   {results[14]}
		{color[0]}  /__/      /__/                   |_|   {results[15]}
		{color[0]}                                         {results[16]}
		{color[0]}                                         {results[17]}
		{color[0]}\x1b[0m""",
	'Fedora': """
		{color[1]}           :/------------://          {results[0]}
		{color[1]}        :------------------://        {results[1]}
		{color[1]}      :-----------{color[0]}/shhdhyo/{color[1]}-://       {results[2]}
		{color[1]}    /-----------{color[0]}omMMMNNNMMMd/{color[1]}-:/      {results[3]}
		{color[1]}   :-----------{color[0]}sMMMdo:/{color[1]}       -:/     {results[4]}
		{color[1]}  :-----------{color[0]}:MMMd{color[1]}-------    --:/    {results[5]}
		{color[1]}  /-----------{color[0]}:MMMy{color[1]}-------    ---/    {results[6]}
		{color[1]} :------    --{color[0]}/+MMMh/{color[1]}--        ---:   {results[7]}
		{color[1]} :---     {color[0]}oNMMMMMMMMMNho{color[1]}     -----:   {results[8]}
		{color[1]} :--      {color[0]}+shhhMMMmhhy++{color[1]}   ------:    {results[9]}
		{color[1]} :-      -----{color[0]}:MMMy{color[1]}--------------/    {results[10]}
		{color[1]} :-     ------{color[0]}/MMMy{color[1]}-------------:     {results[11]}
		{color[1]} :-      ----{color[0]}/hMMM+{color[1]}------------:      {results[12]}
		{color[1]} :--{color[0]}:dMMNdhhdNMMNo{color[1]}-----------:        {results[13]}
		{color[1]} :---{color[0]}:sdNMMMMNds:{color[1]}----------:          {results[14]}
		{color[1]} :------{color[0]}:://:{color[1]}-----------://           {results[15]}
		{color[1]} :--------------------://             {results[16]}
		{color[1]}                                      {results[17]}
		{color[1]}\x1b[0m"""
}

processes = str(check_output(('ps', '-u', str(getuid()), '-o', 'comm', '--no-headers')), encoding='utf-8').rstrip('\n').split('\n')


# -------------- Classes -------------- #

class Output:
	def __init__(self):
		self.results = []

	def append(self, key, value):
		self.results.append('%s%s: %s%s' % (colorDict[distribution][1], key, colorDict['Clear'][0], value))

	def output(self):
		results = []
		results.extend([''] * floor((18 - len(self.results)) / 2))
		results.extend(self.results[:])

		if len(results) < 18:
			results.extend([''] * (18 - len(results)))

		print(logosDict[distribution].format(color=colorDict[distribution], results=results))


class User:
	def __init__(self):
		self.value = getenv('USER')


class Hostname:
	def __init__(self):
		hostname = Popen(['uname', '-n'], stdout=PIPE).communicate()[0].decode('utf-8').rstrip('\n')

		self.value = hostname


class Distro:
	def __init__(self):
		self.value = distribution


class Kernel:
	def __init__(self):
		kernel = Popen(['uname', '-r'], stdout=PIPE).communicate()[0].decode('utf-8').rstrip('\n')

		self.value = kernel


class Uptime:
	def __init__(self):
		with open('/proc/uptime', 'r') as file:
			fuptime = int(file.read().split('.')[0])
			file.close()

		day = int(fuptime / 86400)
		fuptime = fuptime % 86400
		hour = int(fuptime / 3600)
		fuptime = fuptime % 3600
		minute = int(fuptime / 60)

		uptime = ''
		uptime += ((str(day) + ' day' + ('s' if day > 1 else '') + ('' if minute == 0 and hour == 0 else (' and ' if (minute != 0 and hour == 0) or (minute == 0 and hour != 0) else ', '))) if day >= 1 else '')
		uptime += ((str(hour) + ' hour' + ('s' if hour > 1 else '') + (' and ' if minute != 0 else '')) if hour >= 1 else '')
		uptime += ((str(minute) + ' minute' + ('s' if minute > 1 else '')) if minute >= 1 else ('< 1 minute' if day == 0 and hour == 0 else ''))

		self.value = uptime


class WindowManager:
	def __init__(self):
		wm = 'None'

		try:
			wm = re.search('(?<=Name: ).*', Popen(['wmctrl', '-m'], stdout=PIPE).communicate()[0].decode('utf-8')).group(0)

		except FileNotFoundError:
			for key in wmDict.keys():
				if key in processes:
					wm = wmDict[key]
					break

		self.value = wm


class DesktopEnvironment:
	def __init__(self):
		de = 'None'
		for key in deDict.keys():
			if key in processes:
				de = deDict[key]
				break

		self.value = de


class Shell:
	def __init__(self):
		self.value = getenv('SHELL')


class Terminal:
	def __init__(self):
		self.value = getenv('TERM')


class Packages:
	def __init__(self):
		packagesTools = [['pacman', '-Q'], ['dnf', 'list', 'installed'], ['dpkg', '--list'], ['zypper', 'search', '--installed-only'], ['emerge', '-ep', 'world']]
		for packagesTool in packagesTools:
			try:
				p1 = Popen(packagesTool, stdout=PIPE).communicate()[0].decode('utf-8')
				break

			except:
				pass

		self.value = len(p1.rstrip('\n').split('\n'))


class CPU:
	def __init__(self):
		with open('/proc/cpuinfo', 'r') as file:
			cpuinfo = re.sub('  +', ' ', file.readlines()[4].replace('model name\t: ', '').rstrip('\n'))
			file.close()

		self.value = cpuinfo


class RAM:
	def __init__(self):
		ram = ''.join(filter(re.compile('M').search, Popen(['free', '-mw'], stdout=PIPE, env={'LANG': 'C'}).communicate()[0].decode('utf-8').split('\n'))).split()
		usedpercent = (float(ram[2]) / float(ram[1])) * 100

		if usedpercent <= 33:
			ramdisplay = '%s%s MB %s/ %s MB' % (colorDict['Sensors'][1], ram[2], colorDict['Clear'][0], ram[1])
		elif usedpercent > 33 and usedpercent < 67:
			ramdisplay = '%s%s MB %s/ %s MB' % (colorDict['Sensors'][2], ram[2], colorDict['Clear'][0], ram[1])
		else:
			ramdisplay = '%s%s MB %s/ %s MB' % (colorDict['Sensors'][0], ram[2], colorDict['Clear'][0], ram[1])

		self.value = ramdisplay


class Disk:
	def __init__(self):
		p1 = Popen(['df', '-Tlh', '-B', 'GB', '--total', '-t', 'ext4', '-t', 'ext3', '-t', 'ext2', '-t', 'reiserfs', '-t', 'jfs', '-t', 'ntfs', '-t', 'fat32', '-t', 'btrfs', '-t', 'fuseblk', '-t', 'xfs', '-t', 'simfs', '-t', 'tmpfs', '-t', 'zfs'], stdout=PIPE).communicate()[0].decode('utf-8')
		total = p1.splitlines()[-1]
		used = re.sub(',', '.', total.split()[3])
		size = re.sub(',', '.', total.split()[2])
		usedpercent = float(total.split()[5][:-1])

		if usedpercent <= 33:
			disk = '%s%s %s/ %s' % (colorDict['Sensors'][1], used, colorDict['Clear'][0], size)
		elif usedpercent > 33 and usedpercent < 67:
			disk = '%s%s %s/ %s' % (colorDict['Sensors'][2], used, colorDict['Clear'][0], size)
		else:
			disk = '%s%s %s/ %s' % (colorDict['Sensors'][0], used, colorDict['Clear'][0], size)

		self.value = disk


classes = OrderedDict([
	('User', User),
	('Hostname', Hostname),
	('Distro', Distro),
	('Kernel', Kernel),
	('Uptime', Uptime),
	('WindowManager', WindowManager),
	('DesktopEnvironment', DesktopEnvironment),
	('Shell', Shell),
	('Terminal', Terminal),
	('Packages', Packages),
	('CPU', CPU),
	('RAM', RAM),
	('Disk', Disk)
])


# -------------- Main -------------- #

if __name__ == '__main__':

	distribution = Popen(['lsb_release', '-i'], stdout=PIPE).communicate()[0].decode('utf-8').split(':')[1].lstrip('\t').rstrip('\n')

	out = Output()
	for key in classes.keys():
		out.append(key, classes[key]().value)
	out.output()
